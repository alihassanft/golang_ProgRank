In Go, an array is a fixed-size, ordered collection of elements of the same type. Here's a rundown of how arrays work in Go:

### Declaration and Initialization
You declare an array by specifying its size and type. The size is part of the type and must be a constant known at compile time.

```go
// Declaration with size and type
var numbers [5]int // Array of 5 integers, initialized to zero values (0, 0, 0, 0, 0)

// Declaration and initialization
numbers := [3]int{1, 2, 3} // Array with 3 elements

// Using ellipsis (...) to infer size from initialization
numbers := [...]int{1, 2, 3, 4} // Size is 4, inferred from the number of elements
```

### Key Characteristics
1. **Fixed Size**: The length of an array is part of its type and cannot change after declaration.
2. **Zero-Initialized**: If you declare an array without initializing it, all elements are set to the zero value of the type (e.g., `0` for `int`, `""` for `string`).
3. **Indexed Access**: Elements are accessed using zero-based indices (`arr[0]`, `arr[1]`, etc.).

```go
numbers := [3]int{10, 20, 30}
fmt.Println(numbers[0]) // Outputs: 10
numbers[1] = 50         // Modifies the second element
fmt.Println(numbers)    // Outputs: [10 50 30]
```

### Length
You can get the length of an array using the built-in `len()` function:
```go
numbers := [4]int{1, 2, 3, 4}
fmt.Println(len(numbers)) // Outputs: 4
```

### Iteration
You can loop over an array using a `for` loop or the `range` keyword:
```go
numbers := [3]int{10, 20, 30}

// Standard for loop
for i := 0; i < len(numbers); i++ {
    fmt.Println(numbers[i])
}

// Using range
for index, value := range numbers {
    fmt.Printf("Index: %d, Value: %d\n", index, value)
}
```

### Multi-dimensional Arrays
Go supports multi-dimensional arrays:
```go
var matrix [2][3]int = [2][3]int{
    {1, 2, 3},
    {4, 5, 6},
}
fmt.Println(matrix[1][2]) // Outputs: 6 (second row, third column)
```

### Notes
- Arrays are **values** in Go, not references. Assigning an array to a new variable copies it:
  ```go
  a := [3]int{1, 2, 3}
  b := a
  b[0] = 10
  fmt.Println(a) // Outputs: [1 2 3] (original unchanged)
  fmt.Println(b) // Outputs: [10 2 3]
  ```
- Because of their fixed size, arrays are less commonly used than **slices**, which are more flexible. Slices are built on top of arrays and can grow or shrink dynamically.


<!-- question -->

Let’s break this down clearly. In Go, `[2][3]int` and `[3][2]int` are both multi-dimensional arrays, but they differ in their **dimensions**—that is, the number of rows and columns they represent. The notation can be confusing at first, so I’ll explain step-by-step what each part means and how they’re different.

### Understanding the Syntax
In Go, an array’s type is defined as `[size]type`. For a multi-dimensional array like `[rows][columns]int`:
- The first number (`[rows]`) specifies the number of **rows**.
- The second number (`[columns]`) specifies the number of **columns** in each row.
- `int` is the type of elements stored in the array.

So:
- `[2][3]int` means an array with **2 rows** and **3 columns**.
- `[3][2]int` means an array with **3 rows** and **2 columns**.

Think of it like a table or grid:
- Rows go up and down (vertical).
- Columns go left to right (horizontal).

### Visualizing the Difference

#### `[2][3]int` (2 rows, 3 columns)
This is a 2x3 grid (2 rows, each with 3 elements):
```
[ 1, 2, 3 ]  // Row 0
[ 4, 5, 6 ]  // Row 1
```
- Total elements: 2 × 3 = 6.
- Example in code:
```go
var array1 [2][3]int = [2][3]int{
    {1, 2, 3},  // Row 0
    {4, 5, 6},  // Row 1
}
fmt.Println(array1[0][2]) // Outputs: 3 (row 0, column 2)
fmt.Println(array1[1][1]) // Outputs: 5 (row 1, column 1)
```

#### `[3][2]int` (3 rows, 2 columns)
This is a 3x2 grid (3 rows, each with 2 elements):
```
[ 1, 2 ]  // Row 0
[ 3, 4 ]  // Row 1
[ 5, 6 ]  // Row 2
```
- Total elements: 3 × 2 = 6.
- Example in code:
```go
var array2 [3][2]int = [3][2]int{
    {1, 2},  // Row 0
    {3, 4},  // Row 1
    {5, 6},  // Row 2
}
fmt.Println(array2[0][1]) // Outputs: 2 (row 0, column 1)
fmt.Println(array2[2][0]) // Outputs: 5 (row 2, column 0)
```

### Key Differences
1. **Shape**:
   - `[2][3]int`: 2 rows × 3 columns = wider horizontally.
   - `[3][2]int`: 3 rows × 2 columns = taller vertically.

2. **Indexing**:
   - In `[2][3]int`, valid indices are `[0][0]` to `[1][2]` (2 rows, 3 columns).
   - In `[3][2]int`, valid indices are `[0][0]` to `[2][1]` (3 rows, 2 columns).
   - Trying to access beyond these bounds (e.g., `array1[2][0]` in `[2][3]int`) will cause a compile-time or runtime error.

3. **Use Case**:
   - If you’re modeling something like a spreadsheet with more columns than rows, use `[2][3]int`.
   - If you’re modeling something taller, like a list of pairs, use `[3][2]int`.

### Are They the Same?
No, `[2][3]int` and `[3][2]int` are **different types** in Go. Even though they both hold 6 elements (2×3 = 3×2), their structure (dimensions) matters. You can’t assign one to the other:
```go
var a [2][3]int
var b [3][2]int
a = b // Error: cannot use b (type [3][2]int) as type [2][3]int in assignment
```

### Analogy
Think of it like a bookshelf:
- `[2][3]int` is a shelf with 2 levels, each holding 3 books (wide shelf).
- `[3][2]int` is a shelf with 3 levels, each holding 2 books (tall shelf).




Great question! Let’s unpack why you see something like `var array1 [2][3]int = [2][3]int{...}` in Go, where the array type appears on both sides of the `=` sign.

### Why Define the Type on Both Sides?
In Go, when you declare a variable and initialize it, you’re telling the compiler two things:
1. **What the variable’s type is** (on the left side).
2. **What value to assign to it** (on the right side, including the type of that value).

The syntax `var array1 [2][3]int = [2][3]int{{1, 2, 3}, {4, 5, 6}}` explicitly specifies the type on both sides. Here’s why this happens and when it’s necessary:

#### 1. Explicit Declaration with `var`
When you use the `var` keyword, you **must specify the type** on the left side because `var` doesn’t infer the type automatically. The right side then provides the value, and its type must match the left side. For example:
```go
var array1 [2][3]int = [2][3]int{
    {1, 2, 3},
    {4, 5, 6},
}
```
- Left side: `var array1 [2][3]int` declares `array1` as a 2x3 array of integers.
- Right side: `[2][3]int{{1, 2, 3}, {4, 5, 6}}` is the value being assigned, explicitly typed as a `[2][3]int`.
- The types must match, and here they do.

If the types didn’t match (e.g., `[2][3]int` on the left and `[3][2]int` on the right), Go would throw an error.

#### 2. Redundancy and Shortcuts
You’re right to notice it looks repetitive! Go provides a shorthand to avoid this repetition using the `:=` operator, which infers the type from the right side:
```go
array1 := [2][3]int{
    {1, 2, 3},
    {4, 5, 6},
}
```
- Here, the type `[2][3]int` is only written once (on the right), and Go infers that `array1` is a `[2][3]int`.
- This is cleaner and more common when you’re initializing the variable immediately.

#### 3. When You Need Both Sides
The `var` syntax with types on both sides is useful in specific cases:
- **Delayed Initialization**: If you declare the variable now but initialize it later, you only specify the type on the left:
  ```go
  var array1 [2][3]int  // Declares array1 with zero values
  // Later...
  array1 = [2][3]int{{1, 2, 3}, {4, 5, 6}}  // Assigns a value
  ```
- **Clarity or Explicitness**: Some programmers prefer writing the type on both sides for readability or to make the code’s intent very clear, especially in complex programs.

#### 4. Why Not Always Required?
Go is designed to be concise. When you use `:=` or when the type is obvious from context, you don’t need to repeat it. For example:
```go
array1 := [2][3]int{{1, 2, 3}, {4, 5, 6}}  // Type inferred
```
Or even shorter with an inferred size using `...`:
```go
array1 := [...][3]int{{1, 2, 3}, {4, 5, 6}}  // Size of outer array (2) inferred
```

### Summary
- `var array1 [2][3]int = [2][3]int{...}` defines the type twice because `var` requires the type on the left, and the right side must match it.
- It’s not always necessary—using `:=` lets Go infer the type, making the code less redundant.
- The double-type syntax is just Go’s way of ensuring type safety when you’re explicit with `var`.

